type EstatuPostulacion {
    id: ID!
    nombre: String!
}

type ResultEstatuPostulacion {
    status: Int!
    message: String!
    type: String!
    response: [EstatuPostulacion]
}

type PostuladoAgrupadoCarrera {
    id: ID!
    nacionalidad: String!
    cedula: Int!
    nombre: String!
    apellido: String!
    fepostulacion: String!
    estatus: String!
    periodo: String!
    tperiodo: String!
    carrera: String!  
}

type ResultPostuladoAgrupadoCarrera {
    status: Int!
    message: String!
    type: String!
    response: [PostuladoAgrupadoCarrera]
}

type Query {
    obtenerEstatusPostulacion: ResultEstatuPostulacion,
    obtenerListadoPostuladoCarrera: ResultPostuladoAgrupadoCarrera
}

type Mutation {
  crearPostulacion(input: InputPostulacion): ResultPostulacion!
  aprobarPostulacion(input: InputAprobarPostulacion): ResultAprobarPostulacion!
}

input InputPostulacion {
  usuario: Int!
  carrera: Int!
  periodo: Int!
  fepostulacion: String!
}

type ResultPostulacion {
  status: Int!
  type: String!
  message: String!
}

input InputAprobarPostulacion {
  estatus: Int!
  usuario: Int!
  feaprobacion: String!
  observacion: String!
  idpostulacion: Int!
}

type ResultAprobarPostulacion {
  status: Int!
  type: String!
  message: String!
}