type Mutation {
    obtenerEstudiante(input: InputConsultaEstudiante!): ResultEstudiante
    crearEstudiante(input: InputEstudiante!): ResultEstudiante
    obtenerDetalleCarrera(input: InputCarrera!): ResultCarrera
    crearCarrera(input: InputCrearCarrera!): ResultCrearCarrera!
    actualizarCarrera(input: InputActualizarCarrera!): ResultCrearCarrera!
}

input InputConsultaEstudiante {
    nacionalidad: Int!
    cedula: Int!
}

input InputCarrera {
    carrera: Int!
}

input InputEstudiante {
  nacionalidad: Int!
  cedula: Int!
  nombre: String!
  apellido: String!
  sexo: Int!
}

type Estudiante {
    id: ID!
    nombre: String!
    apellido: String!
    sexo: String!
}

type ResultEstudiante {
    status: Int!
    message: String!
    type: String!
    response: Estudiante
}

type DetalleCarrera {
    id: ID!
    carrera: String!
    trayecto: String!
    materia: String!
    personal: String!
    estatus: String!
}

type ResultCarrera {
    status: Int!
    message: String!
    type: String!
    response: [DetalleCarrera]
}

input InputCrearCarrera {
    codigo: String!
    nombre: String!
    tipo: Int!
    ciclo: Int!
    titulo: String!
}

input InputActualizarCarrera {
    codigo: String!
    nombre: String!
    tipo: Int!
    ciclo: Int!
    titulo: String!
    idcarrera: Int!
}

type ResultCrearCarrera {
    status: Int!
    message: String!
    type: String!
}

type Query {
    obtenerTodasCarreras: ResultTodasCarreras,
}

type Carreras {
    id: ID!
    codigo: String!
    nombre: String!
    tipo: String!
    ciclo: String!
    estatus: String!
    titulo: String!
}

type ResultTodasCarreras {
    status: Int!
    message: String!
    type: String!
    response: [Carreras]
}